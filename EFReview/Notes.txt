What is LINQ?
	Language INtegrated Query
	used to bridge the gap between objects and data

LINQ
	can query
		Objects in Memory - find, sort, etc
		XML
		Relational DBs (SQL)
		NoSQL DBs (Mongo)
	same programming model for all

Before LINQ
	needed T-SQL or PL/SQL or XQuery

After LINQ
	use same model for all data stores
	query automatically translated for that data store

Benefits
	No more SQL queries / sprocs (you may still need to write some though)
	Increased productivity

LINQ is for simple queries

If you need more than or complex query write a stored procedure

Everything has its place

There are some instance when you want to use LINQ
and
Then some instances when you want to use T-SQL Stored Procedures

Grouping in LINQ is different from Grouping in SQL

In SQL, grouping is used with aggregate functions like count, sum, etc

In LINQ, grouping is used to group objects by particular prop
	w/o the use of aggregate functions

For instance,
	if grouping Courses by their level, you would get back
	Course objects grouped by their Level with a Key
		Key = 1 (Level 1 Course objects)
		Key = 2 (Level 2 Course objects)
		Key = 3 (Level 3 Course objects)

Joining

in LINQ, 3 types of joins
Inner Join - similar to SQL

	used to join two tables together

	Courses and Author

	can display list of courses and author

	you can use navigation property to display related entity

Group Join

	imagine two list
	associate each object on left with one or more matching objects on right

	left join with aggreate
	for example,
		get list of Authors with count of their courses
		in SQL
			SELECT A.Name, COUNT(*)
			FROM Authors A
			LEFT JOIN Courses C
				ON A.AuthorID = C.AuthorID
			GROUP BY A.Name

Cross Join - similar to SQL
	same as SQL


