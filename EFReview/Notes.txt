Use DBContext

Change Tracker
	Responsible for keeping track of state of objects in DbContext

New - Marks as Added
Edit - Marks as Modified
Remove - Marks as Deleted

No modification in db yet, only in memory

Once SaveChagnes() is called, EF looks at state of objects in memory
then generates the SQL necessary to make database changes.

Once changes commit, changeTracker changes back to Unchanged

Adding
Modifying
Removing Objects

=================
Removing Objects
=================

2 Types of Remove

1. With Cascade Delete

	Course -> (*) Tag (would delete course and all tags associated)

2. Without Cascade Delete

	Author -> (*) Course

==============================
DB Best Practices
==============================

Prefer logical deletes to physical deletes.
	author.IsDeleted = true;

==============================
Working with Change Tracker
==============================

This is good to know if you want to understand whats happening under the hood
or
If you want to implement an audit trail, audit tracking

context.ChangeTracker.Entries() returns list of DbEntityEntry

DbEntityEntry object
	CurrentValues - current property names being worked for entity
			use PropertyName as indexers to get values
		entry.CurrentValues["Name"] will get value
		entry.CurrentValues["Id"] will get Id

	Entity - the actual entity being used

	OriginalValues - original property values (in case of an edit)
		entry.OriginalValues["Name"]

	State - Added, Removed, Modified